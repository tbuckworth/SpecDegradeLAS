module Rg2

env boolean req;
env boolean cancel;
sys boolean grant;

guarantee -- guarantee1_1
	pRespondsToS(req,next(grant));

guarantee -- guarantee2_1
	G((cancel|grant)->next(!grant));

assumption -- assumption1_1
	G(!cancel);

pattern pRespondsToS(s, p) {
  var { S0, S1} state;

  // initial assignments: initial state
  ini state=S0;

  // safety this and next state
  alw ((state=S0 & ((!s) | (s & p)) & next(state=S0)) |
  (state=S0 & (s & !p) & next(state=S1)) |
  (state=S1 & (p) & next(state=S0)) |
  (state=S1 & (!p) & next(state=S1)));

  // equivalence of satisfaction
  alwEv (state=S0);
}