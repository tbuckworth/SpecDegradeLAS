module Lift

env boolean b1;
env boolean b2;
env boolean b3;
env boolean cancel;
sys boolean f1;
sys boolean f2;
sys boolean f3;

assumption -- initial_assumptions
	!b1 & !b2 & !b3;

assumption -- button1_off_at_floor1
	G(b1 & f1 -> next(!b1));

assumption -- button2_off_at_floor2
	G(b2 & f2 -> next(!b2));

assumption -- button3_off_at_floor3
	G(b3 & f3 -> next(!b3));

assumption -- button1_stays_on
	G(b1 & !f1 -> next(b1));

assumption -- button2_stays_on
	G(b2 & !f2 -> next(b2));

assumption -- button3_stays_on
	G(b3 & !f3 -> next(b3));

guarantee -- initial_guarantees
	f1 & !f2 & !f3;
	
guarantee -- one_floor_only1
	G(f1 -> !f2 & !f3);

guarantee -- one_floor_only2
	G(f2 -> !f1 & !f3);

guarantee -- one_floor_only3
	G(f3 -> !f1 & !f2);

guarantee -- move_one_max1
	G(f1 -> next(f1) | next(f2));

guarantee -- move_one_max2
	G(f2 -> next(f1) | next(f2) | next(f3));

guarantee -- move_one_max3
	G(f3 -> next(f3) | next(f2));

//guarantee --
//	G(b1 -> F(f1));
//
//guarantee --
//	G(b2 -> F(f2));
//
//guarantee --
//	G(b3 -> F(f3));


guarantee -- guarantee1_1
	pRespondsToS(b1,f1);
guarantee -- guarantee1_1
	pRespondsToS(b2,f2);
guarantee -- guarantee1_1
	pRespondsToS(b3,f3);


pattern pRespondsToS(s, p) {
  var { S0, S1} state;

  // initial assignments: initial state
  ini state=S0;

  // safety this and next state
  alw ((state=S0 & ((!s) | (s & p)) & next(state=S0)) |
  (state=S0 & (s & !p) & next(state=S1)) |
  (state=S1 & (p) & next(state=S0)) |
  (state=S1 & (!p) & next(state=S1)));

  // equivalence of satisfaction
  alwEv (state=S0);
}