module Simple_Arbiter_V1

env boolean r_0;
env boolean r_1;
sys boolean g_0;
sys boolean g_1;


assumption
	r_0;

assumption -- assumption1
	G((!(g_0))|(!(g_1)));

assumption -- assumption2
	G(((r_0)&(next(r_1)))->(next((g_0)&(g_1))));

assumption -- assumption3
	pRespondsToS(r_0, g_0 & g_1);
//	G((r_0)->(F(g_0)));
//
//assumption -- assumption4
//	G((r_1)->(F(g_1)));

assumption test_assumption:
	G(r_0 -> g_1);


//  var { S0, S1} state;
//  
//  // initial assignments: initial state
//  ini state=S0;
//  
//  // safety this and next state
//  alw ((state=S0 & ((!r_1) | (r_1 & g_1)) & next(state=S0)) |
//  (state=S0 & (r_1 & !g_1) & next(state=S1)) |
//  (state=S1 & (g_1) & next(state=S0)) |
//  (state=S1 & (!g_1) & next(state=S1)));
//  
//  // equivalence of satisfaction
//  alwEv (state=S0);
  
  
  
pattern pRespondsToS(s, p) {
  var { S0, S1} state;
  
  // initial assignments: initial state
  ini state=S0;
  
  // safety this and next state
  alw ((state=S0 & ((!s) | (s & p)) & next(state=S0)) |
  (state=S0 & (s & !p) & next(state=S1)) |
  (state=S1 & (p) & next(state=S0)) |
  (state=S1 & (!p) & next(state=S1)));
  
  // equivalence of satisfaction
  alwEv (state=S0);
}
  
  
  